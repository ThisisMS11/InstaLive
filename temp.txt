const ffmpeg2 = (youtube, twitch, facebook, customRTMP) => {
  return [
    '-i',
    '-',
    // select first stream intended for output
    '-map',
    '0',
    // video codec config: low latency, adaptive bitrate
    '-c:v',
    'libx264',
    '-preset',
    'veryfast',
    '-tune',
    'zerolatency',
    '-g:v',
    '60',

    // audio codec config: sampling frequency (11025, 22050, 44100), bitrate 64 kbits
    '-c:a',
    'aac',
    '-strict',
    '-2',
    '-ar',
    '44100',
    '-b:a',
    '64k',

    //force to overwrite
    '-y',

    // used for audio sync
    '-use_wallclock_as_timestamps',
    '1',
    '-async',
    '1',

    '-flags',
    '+global_header',
    '-f',
    'tee',
    `[f=flv:onfail=ignore]${youtube}|[f=flv:onfail=ignore]${twitch}|[f=flv:onfail=ignore]${facebook}|[f=flv:onfail=ignore]${customRTMP}`,
  ]
}

module.exports.ffmpeg2 = ffmpeg2



const express = require('express');
const cors = require('cors');
const { Server } = require('socket.io');
const dotenv = require('dotenv');
const { youtubeSettings, inputSettings } = require('./ffmpeg');
const child_process = require('child_process');

dotenv.config();

const app = express();
const PORT = process.env.PORT || 8000;

app.use(cors());
app.use(express.json({ limit: '200mb', extended: true }));
app.use(express.urlencoded({ limit: '200mb', extended: true, parameterLimit: 50000 }));

app.get('/', (req, res) => {
    res.send("Server is up and running");
});

const server = require('http').createServer(app);

const io = new Server(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

io.on('connection', (socket) => {
    console.log(`Socket connected to ${socket.id}`);
    const youtubeUrl = socket.handshake.query.youtubeUrl;

    const ffmpegInput = inputSettings.concat(youtubeSettings(youtubeUrl))

    const ffmpeg = child_process.spawn('ffmpeg', ffmpegInput);

    ffmpeg.on('close', (code, signal) => {
        console.log('FFmpeg child process closed, code ' + code + ', signal ' + signal);
    });

    ffmpeg.stdin.on('error', (e) => {
        console.log('FFmpeg STDIN Error', e);
    });

    ffmpeg.stderr.on('data', (data) => {
        console.log('FFmpeg STDERR:', data.toString());
    });

    socket.on('message', (msg) => {
        console.log('DATA', msg);
        ffmpeg.stdin.write(msg);
    });

    socket.conn.on('close', (e) => {
        console.log('kill: SIGINT');
        ffmpeg.kill('SIGINT');
    });
});

server.listen(PORT, () => {
    console.log(`Listening on PORT ${PORT} for REST API requests`);
});



import express, { json, urlencoded } from 'express';
import cors from 'cors';
import { Server } from 'socket.io';
import { config } from 'dotenv';
import ffmpeg from 'fluent-ffmpeg';
import { PassThrough } from 'stream';
import { fileTypeFromBuffer } from 'file-type';
import http from 'http';

config();

const app = express();
const PORT = process.env.PORT || 8000;

app.use(cors());
app.use(json({ limit: '200mb', extended: true }));
app.use(urlencoded({ limit: '200mb', extended: true, parameterLimit: 50000 }));

app.get('/', (req, res) => {
    res.send("Server is up and running");
});

const server = http.createServer(app);

const io = new Server(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

io.on('connection', (socket) => {
    console.log(`Socket connected to ${socket.id}`);
    const youtubeUrl = socket.handshake.query.youtubeUrl;

    let accumulatedBuffer = Buffer.alloc(0);
    const minimumBufferLength = 512; // Adjust based on your needs

    // Create a PassThrough stream to handle incoming data
    const stream = new PassThrough();

    // .inputFormat('v4l2')  // Video format (adjust for your OS)
    // .videoCodec('libx264')
    // .audioCodec('aac')
    // .outputOptions([
    //   '-preset veryfast',     // Preset for encoding speed vs compression
    //   '-tune zerolatency',    // Tune for low latency
    //   '-g 60',                // GOP size (number of frames between keyframes)
    //   '-strict -2'            // Necessary for some AAC codecs
    // ])
    // .output(YOUTUBE_RTMP_URL)
    // .format('flv');
    // Set up FFmpeg to read from the PassThrough stream
    const ffmpegCommand = ffmpeg(stream)
        .inputFormat('webm')
        .videoCodec('libx264')
        .audioCodec('aac')
        .outputOptions([
            '-preset veryfast',
            '-tune zerolatency',
            '-g 60',
            '-strict -2',
            '-ar 44100',
            '-use_wallclock_as_timestamps 1',
            '-async 1',
        ])
        .format('flv')
        .output(youtubeUrl)
        .on('start', commandLine => {
            console.log('FFmpeg command: ' + commandLine);
        })
        .on('error', (err, stdout, stderr) => {
            console.log('Error: ' + err.message);
            console.log('FFmpeg stderr: ' + stderr);
        })
        .on('end', () => {
            console.log('Streaming ended.');
        });


    ffmpegCommand.run();


    socket.on('message', async (chunk) => {
        accumulatedBuffer = Buffer.concat([accumulatedBuffer, chunk]);

        // Check if accumulatedBuffer has enough data
        if (accumulatedBuffer.length >= minimumBufferLength) {
            try {
                const type = await fileTypeFromBuffer(accumulatedBuffer);
                console.log('Detected type:', type);

                if (type) {
                    stream.write(accumulatedBuffer);
                    accumulatedBuffer = Buffer.alloc(0); // Reset accumulated buffer
                } else {
                    console.warn('Unsupported file type or incomplete buffer');
                }
            } catch (error) {
                console.error('Error processing message:', error);
            }
        }
    });

    socket.conn.on('close', (e) => {
        console.log('kill: SIGINT');
        ffmpegCommand.kill('SIGINT');
    });
});

server.listen(PORT, () => {
    console.log(`Listening on PORT ${PORT} for REST API requests`);
});




'use client';

import React, { useEffect, useRef, useState } from "react";
import { Button } from "@/components/ui/button";
import {
    Card,
    CardContent,
    CardFooter,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import classNames from 'classnames';
import { Video, VideoOff, Mic, MicOff } from 'lucide-react';
import { useStudio } from "@/app/context/StudioContext";
import { io } from 'socket.io-client';
import axios from "axios";
import { type } from "os";


export default function StudioEntry() {

    const videoRef = useRef<HTMLVideoElement>(null);
    // const audioRef = useRef<HTMLAudioElement>(null);

    const [mediaStream, setMediaStream] = useState<MediaStream | null>(null);

    const socket = useRef<any>(null);
    // const mediaRecorder = useRef<MediaRecorder | null>(null);

    let liveStreamRecorder;


    const { isVideoOn, setIsVideoOn, isAudioOn, setIsAudioOn, displayName } = useStudio();

    // const [audioLevel, setAudioLevel] = useState<number>(0);
    // const [audioContext, setAudioContext] = useState<AudioContext | null>(null);

    const handleVideoToggle = () => {
        if (isVideoOn) stopVideo();
        else startVideo();

        setIsVideoOn(!isVideoOn);
    };

    const handleAudioToggle = () => {
        // if (isAudioOn) {
        //     if (audioContext) {
        //         setAudioLevel(0);  // Set audio level to zero immediately
        //         audioContext.suspend(); // Suspend audio context
        //     }
        // } else {
        //     if (!audioContext) {
        //         startAudio(); // Restart audio stream
        //     } else {
        //         audioContext.resume(); // Resume audio context
        //     }
        // }
        setIsAudioOn(!isAudioOn);
    };

    const startVideo = async () => {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            setMediaStream(stream);
            if (videoRef.current) {
                videoRef.current.srcObject = stream;
            }
        } catch (error) {
            console.error("Error accessing webcam:", error);
        }
    };

    const stopVideo = async () => {
        if (mediaStream) {
            mediaStream.getVideoTracks().forEach((track) => {
                track.stop();
            })
        }
    }

    // async function startAudio() {
    //     try {
    //         const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    //         const newAudioContext = new AudioContext();
    //         const source = newAudioContext.createMediaStreamSource(stream);
    //         const analyser = newAudioContext.createAnalyser();
    //         source.connect(analyser);
    //         analyser.fftSize = 256;
    //         const dataArray = new Uint8Array(analyser.frequencyBinCount);

    //         const analyze = () => {
    //             analyser.getByteFrequencyData(dataArray);
    //             const average = dataArray.reduce((a, b) => a + b) / dataArray.length;
    //             setAudioLevel(average);
    //             requestAnimationFrame(analyze);
    //         };

    //         analyze();
    //         setAudioContext(newAudioContext);
    //     } catch (error) {
    //         console.error("Error accessing microphone:", error);
    //     }
    // }
    const transitionToLive = async () => {
        const url = `${process.env.NEXT_PUBLIC_URL}/api/youtube/broadcast/status`;
        try {
            const response = await axios.put(url, {
                youtubeBroadcastId: "GWodIL8vJ-k",
                status: "testing"
            });
            const data = response.data;
            console.log({ data });
            return data;
        } catch (error) {
            console.error("Some error occurred while updating broadcast status:", error);
            throw error;
        }
    }

    const InstaLive = () => {
        console.log('live Me called');
        const youtubeUrl = "rtmp://a.rtmp.youtube.com/live2/w8vy-4dvt-42ea-5xtg-31zr"
        const url = `http://localhost:8005/?youtubeUrl=${youtubeUrl}`
        socket.current = io(url, {
            transports: ['websocket']
        })

        InitiateRecording();

        // setTimeout(() => {
        //     transitionToLive();
        // }, 10000);
    }

    const InitiateRecording = async () => {
        const videoElement = videoRef.current as HTMLVideoElement & {
            captureStream?(frameRate?: number): MediaStream
        };

        if (videoElement && videoElement.captureStream) {


            const videoStream = videoElement.captureStream(30); // Capture video at 30FPS

            console.log({videoStream})

            try {
                // Capture audio stream
                const audioStream = await navigator.mediaDevices.getUserMedia({ video:true, audio: true });

                // Combine video and audio streams
                const combinedStream = new MediaStream([
                    ...videoStream.getVideoTracks(),
                    ...audioStream.getAudioTracks(),
                ]);

                console.log({combinedStream})

                liveStreamRecorder = new MediaRecorder(combinedStream, {
                    audioBitsPerSecond: 128000,
                    videoBitsPerSecond: 2500000,
                    mimeType: 'video/webm;codecs=vp8,opus',
                    //@ts-ignore
                    framerate: 30,
                });

                liveStreamRecorder.ondataavailable = (e: any) => {
                    console.log('Data is available and sent.');
                    console.log(typeof (e.data));
                    console.log(e.data);

                    socket.current.emit('binarystream', e.data)
                };

                // Start recording and dump data every second
                liveStreamRecorder.start(1000);

            } catch (error) {
                console.error("Error accessing microphone:", error);
            }

        } else {
            console.error("captureStream is not supported on this browser.");
        }
    };

    useEffect(() => {
        if (isVideoOn) {
            console.log("videostaring ....")
            startVideo();
            InstaLive();
        }
        return () => {
            stopVideo();
        };
    }, []);

    useEffect(() => {
        if (!mediaStream) {
            startVideo()
        } else {
            return function cleanup() {
                stopVideo();
            }
        }
    }, [mediaStream])


    return (
        <Card className="grid grid-cols-12">
            {/* <CardHeader>
                <CardTitle className="text-center">Main {displayName}</CardTitle>
            </CardHeader> */}
            <div className="col-span-10 gap-4">

                <CardContent className=" bb items-center justify-center flex flex-col">

                    <div className="w-[65rem] h-[40rem] rounded-lg border bg-card text-card-foreground shadow-sm">
                        <video ref={videoRef} autoPlay className="w-full h-full object-cover" playsInline />
                    </div>
                    {/* <div className="col-span-2 space-y-1.5 rounded-lg border bg-card text-card-foreground shadow-sm">
                        <div ref={audioRef} className="h-full w-full bg-gray-200 relative flex items-end justify-center">
                            <div className={classNames('w-full', { 'bg-red-500': audioLevel > 90, 'bg-orange-500': audioLevel > 60 && audioLevel <= 90, 'bg-green-500': audioLevel <= 60 })} style={{ height: `${audioLevel}%` }}></div>
                        </div>
                    </div> */}

                    {/* ButtonGroup to toggle audio and video */}
                    <div className="bb mt-2 flex justify-center gap-10">
                        <Button onClick={handleAudioToggle}>
                            {isAudioOn ? <Mic /> : <MicOff />}
                        </Button>
                        <Button onClick={handleVideoToggle}>
                            {isVideoOn ? <Video /> : <VideoOff />}
                        </Button>
                    </div>

                </CardContent>
            </div>


        </Card>
    );
}



///  WORKING SERVER CODE : 
import express, { json, urlencoded } from 'express';
import cors from 'cors';
import { Server } from 'socket.io';
import { config } from 'dotenv';
import { spawn } from 'child_process';
// import { fileTypeFromBuffer } from 'file-type';
import http from 'http';

config();

const app = express();
const PORT = process.env.PORT || 8000;

app.use(cors());
app.use(json({ limit: '200mb', extended: true }));
app.use(urlencoded({ limit: '200mb', extended: true, parameterLimit: 50000 }));

app.get('/', (req, res) => {
    res.send("Server is up and running");
});

const server = http.createServer(app);

const io = new Server(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

ffmpeg -i pipe:0 -i - -acodec aac -b:a 128k -ar 44100 -vcodec libx264 -r 25 -preset ultrafast -tune zerolatency -g 50 -keyint_min 25 -crf 25 -pix_fmt yuv420p -sc_threshold 0 -profile:v main -level 3.1 -f flv rtmp://a.rtmp.youtube.com/live2/w8vy-4dvt-42ea-5xtg-31zr pipe:1

const options = [
    '-i', '-',
    '-c:v', 'libx264',
    '-preset', 'ultrafast',
    '-tune', 'zerolatency',
    '-r', '25',
    '-g', `${25 * 2}`,
    '-keyint_min', 25,
    '-crf', '25',
    '-pix_fmt', 'yuv420p',
    '-sc_threshold', '0',
    '-profile:v', 'main',
    '-level', '3.1',
    '-c:a', 'aac',
    '-b:a', '128k',
    '-ar', '44100',
    '-f', 'flv',
    'rtmp://a.rtmp.youtube.com/live2/kq2g-kfjk-730c-ukjk-100z',
];

const ffmpegProcess = spawn('ffmpeg', options);

ffmpegProcess.stdout.on('data', (data) => {
    console.log(`ffmpeg stdout: ${data}`);
});

ffmpegProcess.stderr.on('data', (data) => {
    console.error(`ffmpeg stderr: ${data}`);
});

ffmpegProcess.on('close', (code) => {
    console.log(`ffmpeg process exited with code ${code}`);
});

io.on('connection', (socket) => {
    console.log(`Socket connected to ${socket.id}`);
    const youtubeUrl = socket.handshake.query.youtubeUrl;

    socket.on('binarystream', (stream) => {
        try {
            ffmpegProcess.stdin.write(stream);
        } catch (err) {
            if (err.code === 'EPIPE') {
                console.log('EPIPE error: FFmpeg process is not writable. Client might have disconnected.');
            } else {
                console.error('Error writing to FFmpeg stdin:', err);
            }
        }
    });

    socket.conn.on('close', () => {
        console.log('Client disconnected, killing FFmpeg process.');
        ffmpegProcess.kill('SIGINT');
    });
});

server.listen(PORT, () => {
    console.log(`Listening on PORT ${PORT} for REST API requests`);
});
  const InitiateRecording = async () => {
    const videoElement = videoRef.current as HTMLVideoElement & {
      captureStream?(frameRate?: number): MediaStream;
    };

    if (videoElement && videoElement.captureStream) {
      const videoStream = videoElement.captureStream(30); // Capture video at 30FPS

      console.log({ videoStream });

      try {
        // Capture audio stream
        const audioStream = await navigator.mediaDevices.getUserMedia({
          video: true,
          audio: false,
        });

        // Combine video and audio streams
        const combinedStream = new MediaStream([
          ...videoStream.getVideoTracks(),
          ...audioStream.getAudioTracks(),
        ]);

        console.log({ combinedStream });

        const liveStreamRecorder = new MediaRecorder(combinedStream, {
          audioBitsPerSecond: 128000,
          videoBitsPerSecond: 2500000,
          mimeType: 'video/webm;codecs=vp8,opus',
          framerate: 30,
        });

        liveStreamRecorder.ondataavailable = (e: any) => {
          console.log('Data is available and sent.');
          console.log(typeof e.data);
          console.log(e.data);

          socket.current.emit('binarystream', e.data);
        };

        // Start recording and dump data every second
        liveStreamRecorder.start(1000);
      } catch (error) {
        console.error('Error accessing microphone:', error);
      }
    } else {
      console.error('captureStream is not supported on this browser.');
    }
  };




  /**
 * v0 by Vercel.
 * @see https://v0.dev/t/V0sVf8pgtan
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuItem } from "@/components/ui/dropdown-menu"
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select } from "@/components/ui/select"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"

export default function Component() {
  return (
    <div className="grid min-h-screen w-full overflow-hidden lg:grid-cols-[280px_1fr]">
      <div className="hidden border-r bg-muted/40 lg:block">
        <div className="flex h-full max-h-screen flex-col gap-2">
          <div className="flex h-[60px] items-center border-b px-6">
            <Link href="#" className="flex items-center gap-2 font-semibold" prefetch={false}>
              <AirplayIcon className="h-6 w-6" />
              <span className="">Streaming Dashboard</span>
            </Link>
          </div>
          <div className="flex-1 overflow-auto py-2">
            <nav className="grid items-start px-4 text-sm font-medium">
              <Link
                href="#"
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary"
                prefetch={false}
              >
                <HomeIcon className="h-4 w-4" />
                Home
              </Link>
              <Link
                href="#"
                className="flex items-center gap-3 rounded-lg bg-muted px-3 py-2 text-primary  transition-all hover:text-primary"
                prefetch={false}
              >
                <AirplayIcon className="h-4 w-4" />
                Streams
              </Link>
              <Link
                href="#"
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary"
                prefetch={false}
              >
                <UsersIcon className="h-4 w-4" />
                Viewers
              </Link>
              <Link
                href="#"
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary"
                prefetch={false}
              >
                <InfoIcon className="h-4 w-4" />
                Analytics
              </Link>
              <Link
                href="#"
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary"
                prefetch={false}
              >
                <SettingsIcon className="h-4 w-4" />
                Settings
              </Link>
            </nav>
          </div>
        </div>
      </div>
      <div className="flex flex-col">
        <header className="flex h-14 lg:h-[60px] items-center gap-4 border-b bg-muted/40 px-6">
          <Link href="#" className="lg:hidden" prefetch={false}>
            <AirplayIcon className="h-6 w-6" />
            <span className="sr-only">Home</span>
          </Link>
          <div className="flex-1">
            <h1 className="font-semibold text-lg">Streaming Dashboard</h1>
          </div>
          <div className="flex flex-1 items-center gap-4 md:ml-auto md:gap-2 lg:gap-4">
            <Button size="sm">
              <PlusIcon className="h-4 w-4 mr-2" />
              New Stream
            </Button>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="icon" className="rounded-full">
                  <img src="/placeholder.svg" width="32" height="32" className="rounded-full" alt="Avatar" />
                  <span className="sr-only">Toggle user menu</span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuLabel>My Account</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem>Settings</DropdownMenuItem>
                <DropdownMenuItem>Support</DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>Logout</DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </header>
        <div className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-6">
          <div className="grid md:grid-cols-2 gap-4">
            <Card>
              <CardHeader>
                <CardTitle>Create New Stream</CardTitle>
                <CardDescription>Set up a new live stream with the details below.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-1">
                  <Label htmlFor="title">Title</Label>
                  <Input id="title" placeholder="Enter stream title" />
                </div>
                <div className="space-y-1">
                  <Label htmlFor="description">Description</Label>
                  <Textarea id="description" placeholder="Enter stream description" rows={3} />
                </div>
                <div className="space-y-1">
                  <Label htmlFor="category">Category</Label>
                  <Select id="category">
                    <option>Gaming</option>
                    <option>Music</option>
                    <option>Creative</option>
                    <option>News</option>
                  </Select>
                </div>
                <div className="space-y-1">
                  <Label htmlFor="privacy">Privacy</Label>
                  <RadioGroup>
                    <RadioGroupItem id="public" value="public" />
                    <Label htmlFor="public">Public</Label>
                    <RadioGroupItem id="private" value="private" />
                    <Label htmlFor="private">Private</Label>
                  </RadioGroup>
                </div>
              </CardContent>
              <CardFooter>
                <Button>Create Stream</Button>
              </CardFooter>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Previous Streams</CardTitle>
                <CardDescription>View details of your past live streams.</CardDescription>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Title</TableHead>
                      <TableHead>Date</TableHead>
                      <TableHead>Duration</TableHead>
                      <TableHead>Viewers</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    <TableRow>
                      <TableCell>Gaming Showcase</TableCell>
                      <TableCell>June 15, 2023</TableCell>
                      <TableCell>2 hours</TableCell>
                      <TableCell>1,500</TableCell>
                      <TableCell>Completed</TableCell>
                      <TableCell>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" size="icon">
                              <MoveHorizontalIcon className="w-4 h-4" />
                              <span className="sr-only">Actions</span>
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuItem>View stream</DropdownMenuItem>
                            <DropdownMenuItem>Download recording</DropdownMenuItem>
                            <DropdownMenuItem>Analyze performance</DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>Music Jam Session</TableCell>
                      <TableCell>May 28, 2023</TableCell>
                      <TableCell>1 hour</TableCell>
                      <TableCell>800</TableCell>
                      <TableCell>Completed</TableCell>
                      <TableCell>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" size="icon">
                              <MoveHorizontalIcon className="w-4 h-4" />
                              <span className="sr-only">Actions</span>
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuItem>View stream</DropdownMenuItem>
                            <DropdownMenuItem>Download recording</DropdownMenuItem>
                            <DropdownMenuItem>Analyze performance</DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>Creative Workshop</TableCell>
                      <TableCell>April 10, 2023</TableCell>
                      <TableCell>3 hours</TableCell>
                      <TableCell>1,200</TableCell>
                      <TableCell>Completed</TableCell>
                      <TableCell>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" size="icon">
                              <MoveHorizontalIcon className="w-4 h-4" />
                              <span className="sr-only">Actions</span>
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuItem>View stream</DropdownMenuItem>
                            <DropdownMenuItem>Download recording</DropdownMenuItem>
                            <DropdownMenuItem>Analyze performance</DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>News Update</TableCell>
                      <TableCell>March 25, 2023</TableCell>
                      <TableCell>1 hour</TableCell>
                      <TableCell>2,000</TableCell>
                      <TableCell>Completed</TableCell>
                      <TableCell>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" size="icon">
                              <MoveHorizontalIcon className="w-4 h-4" />
                              <span className="sr-only">Actions</span>
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuItem>View stream</DropdownMenuItem>
                            <DropdownMenuItem>Download recording</DropdownMenuItem>
                            <DropdownMenuItem>Analyze performance</DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}

function AirplayIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1" />
      <path d="m12 15 5 6H7Z" />
    </svg>
  )
}


function HomeIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
      <polyline points="9 22 9 12 15 12 15 22" />
    </svg>
  )
}


function InfoIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <path d="M12 16v-4" />
      <path d="M12 8h.01" />
    </svg>
  )
}


function MoveHorizontalIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polyline points="18 8 22 12 18 16" />
      <polyline points="6 8 2 12 6 16" />
      <line x1="2" x2="22" y1="12" y2="12" />
    </svg>
  )
}


function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  )
}


function SettingsIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
      <circle cx="12" cy="12" r="3" />
    </svg>
  )
}


function UsersIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
      <circle cx="9" cy="7" r="4" />
      <path d="M22 21v-2a4 4 0 0 0-3-3.87" />
      <path d="M16 3.13a4 4 0 0 1 0 7.75" />
    </svg>
  )
}