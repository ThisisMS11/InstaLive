generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int? 
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model User {
  id            String        @id @default(cuid())
  name          String?
  username      String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean       @default(false)
  accounts      Account[]
  youtube       YouTube?
  livestreams   LiveStream[]
  broadcasts    Broadcast[]
  overlays      Overlays[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model YouTube {
  id                String    @id @default(uuid())
  userId            String    @unique
  channelId         String
  title             String
  description       String?
  customUrl         String?
  thumbnail         String?
  publishedAt       DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, channelId], name: "user_channel_unique")
}

model LiveStream {
  id                 String    @id @default(cuid())
  createdBy          String     
  title              String
  createdAt          DateTime  @default(now())
  duration           String?
  resolution         String?
  frameRate          String?
  broadcasts         Broadcast[]
  ingestionAddress   String?
  completedAt        DateTime  @updatedAt
  user               User      @relation(fields : [createdBy],references:[id],onDelete : Cascade)
}


enum privacyStatusEnum {
  private
  public
}

enum BroadcastStatus {
  created
  ready
  testing
  live
  complete
}

model Broadcast {
  id                   String    @id @default(cuid())
  userId               String
  title                String
  description          String
  liveStreamId         String
  channelId            String
  liveChatId           String
  privacyStatus        privacyStatusEnum
  thumbnail            String
  createdAt            DateTime  @default(now())
  completedAt          DateTime  @updatedAt
  status               BroadcastStatus

  liveStream           LiveStream   @relation(fields:[liveStreamId],references:[id],onDelete : Cascade)
  user                 User         @relation(fields:[userId],references:[id],onDelete : Cascade)
}

model Overlays {
  id                   String       @id @default(cuid())
  userId               String
  description          String       @default("NA")
  public_id            String       @unique
  url                  String   
  user                 User         @relation(fields:[userId],references:[id],onDelete : Cascade)
}

model LiveChatMessageAuthor {
  id                  String   @id 
  channelUrl          String   
  displayName         String   
  profileImageUrl     String
  liveChatMessages    LiveChatMessage[]  
}

model LiveChatMessage {
  id              String   @id @default(cuid())
  type            String   
  liveChatId      String   
  publishedAt     DateTime 
  messageText     String   
  authorChannelId String  
  author          LiveChatMessageAuthor   @relation(fields: [authorChannelId], references: [id])

  @@index([liveChatId, publishedAt]) 
}


